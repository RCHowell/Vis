{"version":3,"file":"main.js","sourceRoot":"","sources":["main.ts"],"names":[],"mappings":"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","sourcesContent":["// Global Variables\nlet FPS: number = 60;\nlet CUTOFF: number = 140; // Cutoff Level For Changing Colors\nlet DATA_LEN: number = 64; // Number Of Circles To Draw\nlet CHANGE_LOC: number = 5; // Frequency To Watch For Changing Palette\nlet controller: MainController;\nlet n = <any>navigator;\n\n$(document).ready(function () {\n  // Relies On Users Having Chrome (for now)\n  n.getUserMedia = n.getUserMedia || n.webkitGetUserMedia || n.mozGetUserMedia || n.msGetUserMedia;\n  if (n.getUserMedia) {\n    n.getUserMedia({audio: true}, function(stream: any) {\n\n        let colorController = new ColorController();\n        let vis = new Vis(colorController.colors);\n      \n        controller = new MainController(\n          new AudioController(stream),\n          colorController,\n          vis\n        );\n      \n        loop();\n\n    },\n    function(err: any) {\n      console.log(err.name);\n    });\n  };\n});\n\n\n\n// AudioController\n// Contains microphone stream and relevant audio components\nclass AudioController {\n\n    public analyzer: any;\n    private microphone: any;\n    private context: any;\n    private element: any;\n\n    constructor(stream: any) {\n        // Initialize Analyzer With Microphone Stream\n        this.context = new AudioContext();\n        this.analyzer = this.context.createAnalyser();\n        this.microphone = this.context.createMediaStreamSource(stream);\n        this.microphone.connect(this.analyzer);\n        this.analyzer.fftSize = DATA_LEN;\n    }\n}\n\n// Main Controller\n// Controller for Audio, Visualizer, and Color interaction\nclass MainController {\n    \n    private audio: AudioController;\n    private color: ColorController;\n    private vis: Vis;\n\n    // Keep Track of Frames and Draw Visualizer\n    private now: number;\n    private then: number;\n    private static interval = 1000 / FPS;\n    private delta: number;\n\n    constructor(audio: AudioController, color: ColorController, vis: Vis) {\n        this.audio = audio;\n        this.color = color;\n        this.vis = vis;\n        this.connectButton();\n    }\n\n    connectButton(): void {\n        $('#color-button').click(function() {\n            this.color.change();\n            this.vis.updateColor(this.color.colors);\n        }.bind(this)); // Bind Must Be Used So That Change Can Be Called\n    }\n\n    update(): void {\n        this.vis.update(this.audio);\n\n        // Start Change Color Rules\n        // Essentially This Changes The Palette At A Peak In Intensity\n        if (this.vis.frequencyData[CHANGE_LOC] > CUTOFF && this.color.shouldChange) {\n            this.color.change();\n            this.vis.updateColor(this.color.colors);\n            this.color.shouldChange = false;\n        }\n        if (this.vis.frequencyData[5] < CUTOFF) this.color.shouldChange = true;\n        // End Change Color Rules\n    }\n\n    loop(): void {\n        requestAnimationFrame(this.loop);\n        this.now = Date.now();\n        this.delta = this.now - this.then;\n        if (this.delta > MainController.interval) {\n            this.then = this.now - (this.delta % MainController.interval);\n            this.update();\n        }\n    }\n}\n\n// ColorController\n// Contains palette switching logic\nclass ColorController {\n\n    // Five Palettes For Now, But The Code Allows For However Many\n    // Note: Palettes Do Not Have To Be Of Length Five\n    private static palettes = [\n        [\"#71A7FE\", \"#399AE7\", \"#3B407C\", \"#547AB1\", \"#CEAFC0\"],\n        [\"#EFBC9B\", \"#EE92C2\", \"#9D6A89\", \"#725D68\", \"#A8B4A5\"],\n        [\"#48639C\", \"#4C4C9D\", \"#712F79\", \"#976391\", \"#F7996E\"],\n        [\"#310A31\", \"#847996\", \"#88B7B5\", \"#A7CAB1\", \"#F4ECD6\"],\n        [\"#2D728F\", \"#3B8EA5\", \"#F5EE9E\", \"#F49E4C\", \"#AB3428\"]\n    ];\n    public colors: string[];\n    private background: any;\n    private count: number;\n    public shouldChange: boolean;\n    \n    constructor() {\n        this.shouldChange = false;\n        this.background = $('body');\n        this.change();\n    }\n\n    change(): void {\n        let random = Math.floor(Math.random() * ColorController.palettes.length);\n        this.colors = ColorController.palettes[random];\n        // New Random For Changing Background Color\n        random = Math.floor(Math.random() * this.colors.length);\n        this.background.css(\"background\", this.colors[random]);\n    }\n\n    randomColor(): string {\n        return this.colors[Math.floor(Math.random() * this.colors.length)];\n    }\n}\n\n// Visualizer class\nclass Vis {\n\n    public frequencyData: Uint8Array;\n    private static container = '#container';\n    private static height = $(Vis.container).height();\n    private static width = $(Vis.container).width();\n    private svg: any;\n    private circles: any[];\n\n    constructor(colors: string[]) {\n        this.svg = d3.select(Vis.container)\n            .append('svg')\n            .attr('height', Vis.height)\n            .attr('width', Vis.width);\n        this.frequencyData = new Uint8Array(DATA_LEN);\n        this.circles = new Array(this.frequencyData.length);\n        this.generateCircles(colors);\n    }\n\n    generateCircles(colors: string[]): void {\n        for (let i = this.frequencyData.length - 1; i >= 0; i--) {\n            let random = Math.floor(Math.random() * colors.length);\n            this.circles[i] = this.svg.append('circle')\n                .attr('cx', Vis.width / 2)\n                .attr('cy', Vis.height / 2)\n                .attr('r', this.frequencyData[i])\n                .style('fill', colors[random]);\n        }\n    }\n\n    updateColor(colors: string[]): void {\n        for (let i = 0; i < this.circles.length; i++) {\n            let random = Math.floor(Math.random() * colors.length);\n            this.circles[i].style(\"fill\", colors[random]);\n      }\n    }\n\n    update(audio: AudioController): void {\n        audio.analyzer.getByteFrequencyData(this.frequencyData);\n        this.draw();\n    }\n\n    draw(): void {\n        for (let i = 0; i < this.circles.length; i++) {\n            // ((i / 10) + 1) is used to make the circles larger\n            // I tried some combinations and found this to fill the screen nicely\n            this.circles[i].attr('r', ((i / 10) + 1) * this.frequencyData[i]);\n        }\n    }\n}\n\n// Keep Track of Frames and Draw Visualizer\nlet now: number;\nlet then = Date.now();\nlet interval = 1000 / FPS;\nlet delta: number;\n\n// Loops at Designated FPS\nfunction loop() {\n  requestAnimationFrame(loop);\n  now = Date.now();\n  delta = now - then;\n  if (delta > interval) {\n    then = now - (delta % interval);\n    // Here's Where Stuff Happens\n    controller.update();\n  }\n}\n"]}